import os

from aiogram import F, Router
from aiogram.filters import CommandStart, StateFilter, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import BufferedInputFile, CallbackQuery, Message

import commands.keyboards as kb
from ml import find_trip, message_processing, fan_facts
from db import database


db = database.Database()
router = Router()

# messages: dict[int, str] = {}
messages = {}
data_proc = ["–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ" for x in range(6)]


async def history_for_chat_id(chat_id: int, db: database.Database) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –µ–µ –≤ —Å—Ç—Ä–æ–∫—É.

    Args:
        chat_id: ID —á–∞—Ç–∞, –∏—Å—Ç–æ—Ä–∏—é –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å.
        db: –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ Database –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.

    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π —á–∞—Ç–∞.
    """
    history_list = await db.get_history(chat_id)
    history_text = ""
    if history_list:
        for item in history_list:
            history_text += f"{item.text}\n"
    return history_text


@router.message(CommandStart())
async def start(message: Message):
    await message.reply(text= """üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç –∫–æ–º–∞–Ω–¥—ã –¢-–ë–ê–ù–ö–ê, –∏ –º–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–¥–µ–ª–∞—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫ –ø—Ä–æ—Å—Ç–æ–π –∏ –ø—Ä–∏—è—Ç–Ω–æ–π.

‚úàÔ∏è –Ø –ø–æ–º–æ–≥—É:

—É—á–µ—Å—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤,
—Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –±—é–¥–∂–µ—Ç,
—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å (–∫—Ç–æ –ø–æ–∫—É–ø–∞–µ—Ç –±–∏–ª–µ—Ç—ã, –∫—Ç–æ –∏—â–µ—Ç –∂–∏–ª—å—ë),
—Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ª—É—á—à–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
üõ† –í—Å—ë –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è ‚Äî –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–æ –ª–∏—á–Ω—ã—Ö –∑–∞–¥–∞—á. –ü—Ä–æ—Å—Ç–æ –æ–±—â–∞–π—Ç–µ—Å—å, –∞ —è –ø–æ–∑–∞–±–æ—á—É—Å—å –æ –¥–µ—Ç–∞–ª—è—Ö!""", reply_markup=kb.keryboard_main)




@router.callback_query(lambda call: call.data == "system")
async def system_setting(callback: CallbackQuery):
    await callback.message.reply(
        text="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ —Ç.–¥."
    )
    await callback.message.answer_photo("https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQWxglAFKIZSP9XMDTNhZjXbh83o54vplMTEw&s")
    await callback.answer("", show_alert=True)

@router.callback_query(lambda call: call.data == "listen")
async def listen_setting(callback: CallbackQuery):
    await callback.message.reply(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π", reply_markup=kb.keryboard_listen
    )
    await callback.answer("", show_alert=True)



@router.message(lambda message: message.text == "–í–∫–ª—é—á–∏—Ç—å")
async def listen_on(message: Message):
    chat_id = message.chat.id
    print(chat_id)
    if chat_id not in messages.keys():
        messages[chat_id] = ""
        await message.reply(
            text="""üéô –Ø –Ω–∞—á–∞–ª –ø—Ä–æ—Å–ª—É—à–∫—É —á–∞—Ç–∞!

        –¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç–µ –≤ —á–∞—Ç–µ:
‚Äî –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–∏–µ —É –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ —Ö–æ–±–±–∏
‚Äî –ö—É–¥–∞ —Ö–æ—Ç–µ–ª–æ—Å—å –±—ã –ø–æ–µ—Ö–∞—Ç—å, –∞ –∫—É–¥–∞ —Ç–æ—á–Ω–æ –Ω–µ —Ö–æ—Ç–∏—Ç–µ
‚Äî –£–∫–∞–∂–∏—Ç–µ –±—é–¥–∂–µ—Ç: –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π
‚Äî –ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ, —á—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å –≤ –ø–æ–µ–∑–¥–∫–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –º–æ—Ä–µ, –º—É–∑–µ–∏, –µ–¥–∞, –ø—Ä–∏—Ä–æ–¥–∞)

        –ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Å–ª—É—à–∫—É¬ª.
        üì© –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —è —Å–æ–±–µ—Ä—É –≤—Å—ë, —á—Ç–æ –≤—ã –Ω–∞–ø–∏—Å–∞–ª–∏, –∏ –ø—Ä–∏—à–ª—é –≤–∞–º –≥–æ—Ç–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è!"""
            , reply_markup=kb.keryboard_listen
        )
        await message.answer_photo("https://thumbs.dreamstime.com/b/%D1%87%D0%B5%D0%BB%D0%BE%D0%B2%D0%B5%D1%87%D0%B5%D1%81%D0%BA%D0%BE%D0%B5-%D1%83%D1%85%D0%BE-%D0%BD%D0%B0-%D0%B1%D0%B5%D0%BB%D0%BE%D0%BC-%D1%84%D0%BE%D0%BD%D0%B5-%D1%81%D0%B8%D0%BC%D0%B2%D0%BE%D0%BB-%D0%B2%D0%B5%D0%BA%D1%82%D0%BE%D1%80-%D0%B8%D0%BB%D0%BB%D1%8E%D1%81%D1%82%D1%80%D0%B0%D1%86%D0%B8%D1%8F-%D0%B2%D0%B5%D0%BA%D1%82%D0%BE%D1%80%D0%B0-211926595.jpg")
    else:
        await message.answer("–ü—Ä–æ—Å–ª—É—à–∫–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞.")
@router.message(F.text != "–í—ã–∫–ª—é—á–∏—Ç—å")
async def collect_message(message: Message): #–û–ù –†–ê–ë–û–¢–ê–ï–¢ –í–°–ï–ì–î–ê. –ù–ï–≠–§–§–ï–ö–¢–ò–í–ù–û. –¥–ª—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏
    chat_id = message.chat.id
    if chat_id in messages.keys():
        messages[chat_id] = messages.get(chat_id,"") + f"\n{message.text}"


# @router.message(F.text)
# async def get_members(message: Message):
#     bot = message.bot  # –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
#     members = []
#     async for member in bot.get_chat_member(message.chat.id):
#         members.append(member.user.full_name)
#     print(members)
#     # return members
#
#     await message.answer("\n".join(members))
@router.message(lambda message: message.text == "–í—ã–∫–ª—é—á–∏—Ç—å")
async def listen_off(message: Message):
    chat_id = message.chat.id
    if chat_id in messages:
        collected_text = messages[chat_id]
        #—Å–¥–µ–ª–∞–π –æ–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏. –∏–Ω–ª–∞–π–Ω —É–ø–æ–ª–∑–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏–∏, –Ω–µ –Ω–∞–π–¥–µ—à—å.
        # –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å collected_text –≤ –∞–Ω–∞–ª–∏–∑ –∏–ª–∏ email
        data_proc = message_processing.trip_input(collected_text)
        print(data_proc)
        if (data_proc):
            if data_proc[1] == None:
                data_proc[1] = data_proc[0]
            elif data_proc[0] == None:
                data_proc[0] = data_proc[1]

        if not(data_proc):
            await message.answer("–ù—É–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å —Ö–æ—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω–æ–µ")
            return None
        elif None in data_proc or (None, None) in data_proc:
            await message.answer("–°–ª–∏—à–∫–æ–º –º–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö")
            return None
        del messages[chat_id]


        await message.reply(
            text=f"""‚è≥ –í–∞—à —Ç—É—Ä –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤!
            
–Ø —É–∂–µ –ø–æ–¥–±–∏—Ä–∞—é –ª—É—á—à–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã, —Å—á–∏—Ç–∞—é –±—é–¥–∂–µ—Ç –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–Ω—Ç–µ—Ä–µ—Å—ã –∫–æ–º–∞–Ω–¥—ã.

–ê –ø–æ–∫–∞ ‚Äî –≤–æ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç üåç:

{fan_facts.fan_fact(data_proc[3])}"""
        )

        await message.reply(text=f"""üß≥ –ü–æ—á—Ç–∏ –≤—Å—ë –≥–æ—Ç–æ–≤–æ!
        
–ú—ã —É–∂–µ –∑–Ω–∞–µ–º, —á—Ç–æ —Å—Ç–æ–∏—Ç –∏—Å–∫–∞—Ç—å —Ç—É—Ä—ã –≤ {", ".join(data_proc[3].split())} —Å —Å—É–º–º–æ–π –Ω–µ –±–æ–ª–µ–µ {data_proc[1]}‚ÇΩ.

üìå –ü–æ–¥–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π –º–∞—Ä—à—Ä—É—Ç ‚Äî –æ—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º –Ω–µ–º–Ω–æ–≥–æ!""")
        # print(messages)
        # members = message.bot.
        # print(members)
        temp_trip = find_trip.find_trip(data_proc)
        await db.history_add(chat_id, temp_trip)
        await message.answer(temp_trip, parse_mode="Markdown",reply_markup=kb.keryboard_main)
    else:
        await message.answer("–ü—Ä–æ—Å–ª—É—à–∫–∞ –Ω–µ –±—ã–ª–∞ –∞–∫—Ç–∏–≤–Ω–∞.")


@router.callback_query(lambda call: call.data == "travel")
async def menu_travel(callback: CallbackQuery):
    await callback.message.reply(
        text="–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–≤–æ–µ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è!", reply_markup=kb.keyboard_trip
    )
    await callback.answer("", show_alert=True)



@router.callback_query(lambda call: call.data == "prioritires")
async def menu_prioritires(callback: CallbackQuery):
    await callback.message.reply(text=f"–í–∞—à–∏ –ø—Ä–æ–∏—Ä–∏—Ç–µ—Ç—ã: {data_proc[5]}"
                                 # , reply_markup=kb.prioritires
                                 )
    await callback.answer("", show_alert=True)


@router.callback_query(lambda call: call.data == "white_list")
async def preferences_w(callback: CallbackQuery):
    await callback.message.reply(
        text="–ú–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–±—Ä–∞—Ç—å –º–µ—Å—Ç–∞ –∏–∑ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞",
        reply_markup=kb.keyboard_pr_white,
    )
    await callback.answer("", show_alert=True)


@router.callback_query(lambda call: call.data == "black_list")
async def preferences_b(callback: CallbackQuery):
    await callback.message.reply(text="–ú–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–±—Ä–∞—Ç—å –º–µ—Å—Ç–∞ –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞", reply_markup=kb.keryboard_pr_black)
    await callback.answer("", show_alert=True)


@router.callback_query(lambda call: call.data == "past_trip")
async def past_trip(callback: CallbackQuery):

    await callback.message.reply(
        text=await history_for_chat_id(callback.message.chat.id, db),
        reply_markup=kb.keryboard_main,
        parse_mode="Markdown"
    )
    await callback.answer("", show_alert=True)


@router.callback_query(lambda call: call.data == "interests")
async def interests(callback: CallbackQuery):
    await callback.message.reply(
        text="–≠—Ç–æ - –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã. –ò —ç—Ç–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ.", reply_markup=kb.keyboard_interests
    )
    await callback.message.answer_photo("https://i.pinimg.com/736x/97/6e/3d/976e3ddff4cf700b1449f262cf15865f.jpg")
    await callback.answer("", show_alert=True)


@router.callback_query(lambda call: call.data == "buget")
async def buget(callback: CallbackQuery):
    await callback.message.reply(
        text=f"–í–∞—à –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç - {data_proc[0]}, –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π - {data_proc[1]}.",
        # reply_markup=kb.keryboard_budget,
    )
    await callback.answer("", show_alert=True)

@router.callback_query(lambda call: call.data == "responsibility")
async def task_manager(callback: CallbackQuery):
    await callback.message.reply(
        text="–ß–µ–º –≤—ã—à–µ –±—é–¥–∂–µ—Ç, —Ç–µ–º –≤—ã—à–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å...", reply_markup=kb.keyboard_task
    )
    await callback.message.answer_photo("https://i.ytimg.com/vi/QmkSfc2If8Y/maxresdefault.jpg")
    await callback.answer("", show_alert=True)

# async def to_mess_proc(callback: CallbackQuery):




# async def trip_find(callback: CallbackQuery,data):
#     await callback.message.reply(text=f"{find_trip.find_trip(data)}")
