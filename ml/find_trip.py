import asyncio
import requests

from yandex_cloud_ml_sdk import YCloudML
import os
from dotenv import load_dotenv
import json
import codecs
from aiogram.types import Message

load_dotenv()

with codecs.open("ml/promt.txt","r","utf-8") as promt_:
    promt = promt_.read()

folder_id = os.environ["FOLDER_ID"]
api_key = os.environ["API_KEY"]
def find_trip():
    # br = do_utils.BudgetRepository()
    min_cost = 100_000
    max_cost = 200_000
    white_list = "Italy, France"
    black_list = "Rome"
    pref = "Skiing,diving in a warm sea"
    with_dates = ""
    end_dates = ""


    sdk = YCloudML(
        folder_id=folder_id, auth=api_key
    )

    model = sdk.models.completions("yandexgpt", model_version="rc")
    model = model.configure(temperature=0.3)
    result = model.run(
        [
            {"role": "system", "text": "–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π. –¢—ã –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ –≤ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ json:"
            f"{promt}"
             },
            {
                "role": "user",
                "text": f"–£ —Ç–µ–±—è –µ—Å—Ç—å —Å–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–µ–∑–¥–∫–∏. –í –Ω–∏—Ö –º–æ–∂–µ—Ç –±—ã—Ç—å –±—é–¥–∂–µ—Ç –ø–æ–µ–∑–¥–∫–∏, –∂–µ–ª–∞–µ–º—ã–µ –º–µ—Å—Ç–∞ –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ. –¢—ã –¥–æ–ª–∂–µ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, –Ω–∞–π—Ç–∏ —Ç—É—Ä—ã, –≥–æ—Å—Ç–∏–Ω–∏—Ü—ã, –±–∏–ª–µ—Ç—ã –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ. –¢–µ–±–µ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ —Å–æ –≤—Å–µ–º–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏ –∏ –∂–µ–ª–∞–Ω–∏—è–º–∏. –î–∞–π –ø–æ–¥—Ä–æ–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –ø–ª–∞–Ω–æ–º –ø—É—Ç—à–µ—Å—Ç–≤–∏—è, —Ü–µ–Ω–æ–π, –¥–∞—Ç–∞–º–∏ –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ.\n\n"
                f"–ë—é–¥–∂–µ—Ç: –æ—Ç {min_cost} –¥–æ {max_cost}\n\n"
                f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –º–µ—Å—Ç–∞: {white_list}\n\n"
                f"–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–µ—Å—Ç: {black_list}\n\n"
                f"–ò–Ω—Ç–µ—Ä–µ—Å—ã –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤: {pref}\n\n"
                f"C–≤–æ–±–æ–¥–Ω—ã–µ –¥–∞—Ç—ã: c {with_dates} –ø–æ {end_dates}\n\n"
            },
        ]
    )

    for alternative in result:
        try:
            trip_data = alternative.text
            trip_data = trip_data.replace("`", """""")
            data = json.loads(trip_data)
        except json.JSONDecodeError as e:
            print('error_json')
            print(trip_data)

        # travel_json = alternative.text
        # data = json.loads(alternative.text)
        # –ó–∞–≥—Ä—É–∂–∞–µ–º JSON

        # data = json.loads(travel_json)
        # data = json.loads(travel_json)
        trip = data["trip"]
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        text_message = f"""
        üìå –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è: *{trip['name']}*

        üóì –î–∞—Ç—ã: {trip['start_date']} ‚Äî {trip['end_date']}
        üìç –û–ø–∏—Å–∞–Ω–∏–µ: {trip['description']}

        üí∞ –ë—é–¥–∂–µ—Ç: {trip['budget']['total']} {trip['budget']['currency']}
        """ + "\n".join([f"- {expense['category']}: {expense['amount']} {trip['budget']['currency']}" for expense in
                         trip['budget']['expenses']])

        # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç
        for destination in trip['destinations']:
            text_message += f"""
        üåç –ú–∞—Ä—à—Ä—É—Ç:
        {destination['city']}, {destination['country']} ({destination['arrival_date']} ‚Äî {destination['departure_date']})
           - –ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ: {destination['accommodation']['name']} ({destination['accommodation']['type']}), {destination['accommodation']['cost_per_night']} {trip['budget']['currency']}/–Ω–æ—á—å
           - –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:""" + "\n".join([
                                                                                                                                                                                                                                                                                                                                                                               f"     - {act['name']} ({act['date']} {act['time']}), —Å—Ç–æ–∏–º–æ—Å—Ç—å: {act['cost']} {trip['budget']['currency']}"
                                                                                                                                                                                                                                                                                                                                                                               for
                                                                                                                                                                                                                                                                                                                                                                               act
                                                                                                                                                                                                                                                                                                                                                                               in
                                                                                                                                                                                                                                                                                                                                                                               destination[
                                                                                                                                                                                                                                                                                                                                                                                   'activities']])

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
        text_message += "\n\n‚úàÔ∏è –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç:"
        for transport in trip['transport']:
            text_message += f"""
        - {transport['type']}: {transport['departure']['city']} ‚Üí {transport['arrival']['city']} ({transport['departure']['date']} {transport['departure']['time']})
          - –ë—Ä–æ–Ω—å: {transport['booking_reference']}, —Å—Ç–æ–∏–º–æ—Å—Ç—å: {transport['cost']} {trip['budget']['currency']}"""

        # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        text_message += "\n\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–∏:"
        for participant in trip['participants']:
            text_message += f"\n- {participant['name']} ({participant['role']}, –∫–æ–Ω—Ç–∞–∫—Ç: {participant['contact']})"

        # –î–æ–±–∞–≤–ª—è–µ–º —á–µ–∫–ª–∏—Å—Ç
        text_message += "\n\n‚úÖ –ß–µ–∫–ª–∏—Å—Ç:"
        for item in trip['checklist']:
            status = "‚úì" if item['completed'] else " "
            text_message += f"\n- [{status}] {item['item']}"

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫–∏
        text_message += f"\n\nüìù –ó–∞–º–µ—Ç–∫–∏:\n{trip['notes']}"

        return text_message
